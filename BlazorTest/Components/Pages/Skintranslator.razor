@page "/skintranslator"
@rendermode InteractiveServer

<PageTitle>Apex Skins Translator</PageTitle>

<h1 class="pb-3 text-center">Apex Skins Translator</h1>

@if (data == null)
{
    <p class="text-center"><em>Loading...</em></p>
}
else
{
    <div class="d-flex justify-content-center mb-4 row">
        <div class="col-2 gap-1">
            <label class="form-label">Search:</label>
            <input class="form-control" type="text" placeholder="Search" @bind="searchKey" @bind:event="oninput" />
        </div>
        <div class="col-3">
            <label class="form-label">Sort by:</label>
            <div class="d-flex gap-2">
                <select class="form-select" @bind="sortField">
                    <option value="ingamename">Ingame Name</option>
                    <option value="model">Model</option>
                    <option value="texture">Material</option>
                </select>
                <select class="form-select" @bind="sortOrder">
                    <option value="asc">Ascending</option>
                    <option value="desc">Descending</option>
                </select>
            </div>
        </div>
    </div>

    @foreach (var item in FilteredData)
    {
        <div class="row mb-5">
            <div class="col-12">
                <h2 class="text-center">@item.legend</h2>
                <h6 class="text-center">
                    <span class="fw-bold">Animations:</span>
                    <a target="_blank"
                        href="https://lite.biast12.site/Legends/Animations/@item.legend/@(item.details?.FirstOrDefault()?.animation)">
                        @item.details?.FirstOrDefault()?.animation
                    </a>
                </h6>
                <div class="card border-dark shadow-sm bg-light overflow-auto">
                    <div class="card-body">
                        <table class="table table-bordered table-hover">
                            <thead>
                                <tr>
                                    <th>Ingame Name</th>
                                    <th>Model</th>
                                    <th>Material</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (item.details?.Any() == true)
                                {
                                    foreach (var detail in SortedData(item.details))
                                    {
                                        <tr class="@(detail.ingamename == "n/a" ? "table-secondary" : string.Empty)">
                                            <td>@detail.ingamename</td>
                                            <td>
                                                <a target="_blank"
                                                    href="https://lite.biast12.site/Legends/Models/@item.legend/@detail.model">
                                                    @detail.model
                                                </a>
                                            </td>
                                            <td>
                                                <a target="_blank" href="https://lite.biast12.site/Legends/Textures/@item.legend">
                                                    @detail.texture
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="4" class="text-center">No data available</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    private List<SkinData>? data;
    private string? searchKey = string.Empty;
    private string sortField = "ingamename";
    private string sortOrder = "asc";

    private IEnumerable<SkinData> FilteredData => data?
    .Where(item => string.IsNullOrEmpty(searchKey) || ContainsSearchKey(item))
    .OrderBy(item => item.legend)
    .ToList() ?? Enumerable.Empty<SkinData>();

    private IEnumerable<SkinDetail> SortedData(IEnumerable<SkinDetail> details) =>
    details.Where(detail =>
    string.IsNullOrEmpty(searchKey) ||
    detail.ingamename?.Contains(searchKey, StringComparison.OrdinalIgnoreCase) == true ||
    detail.model?.Contains(searchKey, StringComparison.OrdinalIgnoreCase) == true
    )
    .OrderBy(detail => detail.ingamename == "Base Skin" ? 0 : 1)
    .ThenBy(detail => sortOrder == "asc"
    ? detail.GetType().GetProperty(sortField)?.GetValue(detail)?.ToString()
    : null)
    .ThenByDescending(detail => sortOrder == "desc"
    ? detail.GetType().GetProperty(sortField)?.GetValue(detail)?.ToString()
    : null);

    private bool ContainsSearchKey(SkinData item) =>
    searchKey != null &&
    (item.legend.Contains(searchKey, StringComparison.OrdinalIgnoreCase) ||
    item.details.Any(detail =>
    detail.ingamename?.Contains(searchKey, StringComparison.OrdinalIgnoreCase) == true ||
    detail.model?.Contains(searchKey, StringComparison.OrdinalIgnoreCase) == true));

    protected override async Task OnInitializedAsync()
    {
        HttpClient ApexSkinsTranslatorClient = new HttpClient();
        ApexSkinsTranslatorClient.BaseAddress = new Uri("https://api.biast12.site/");

        try
        {
            var response = await ApexSkinsTranslatorClient.GetAsync("apex_skin_translator");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                data = JsonSerializer.Deserialize<List<SkinData>>(json);
            }
            else
            {
                Console.Error.WriteLine($"Error fetching data: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching data: {ex.Message}");
        }

        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("search", out var initialSearch))
        {
            searchKey = initialSearch.ToString();
        }
    }
}
