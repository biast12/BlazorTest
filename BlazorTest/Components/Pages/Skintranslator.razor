@page "/skintranslator"
@rendermode InteractiveServer

<PageTitle>Apex Skins Translator</PageTitle>

<h1 class="pb-3 text-center">Apex Skins Translator</h1>

@if (Data == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="d-flex justify-content-center mb-4 row">
        <div class="d-flex flex-column align-items-center col-2">
            <p class="mt-3 mb-0">Search:</p>
            <input class="m-2 form-control" style="width: 200px" type="text" placeholder="Search" @bind="searchKey"
                @bind:event="oninput" />
        </div>
        <div class="d-flex flex-column align-items-center col-2">
            <p class="mt-3 mb-0">Sort by:</p>
            <div class="d-flex">
                <select class="m-2 form-control" style="width: 125px" @bind="sortField">
                    <option value="ingamename">Ingame Name</option>
                    <option value="model">Model</option>
                    <option value="texture">Material</option>
                </select>
                <select class="m-2 form-control" style="width: 125px" @bind="sortOrder">
                    <option value="asc">Ascending</option>
                    <option value="desc">Descending</option>
                </select>
            </div>
        </div>
    </div>

    <div class="mx-auto">
        @foreach (var data in FilteredAndSortedData)
        {
            <div class="row">
                <div class="col-12">
                    <h2 class="pb-3 text-center">@data.legend</h2>
                    <div class="border border-dark w-100 p-3 shadow card bg-light mb-5 overflow-auto">
                        <div class="card-body">
                            <table class="table table-sm table-bordered table-hover">
                                <thead>
                                    <tr>
                                        <th class="text-secondary">Ingame Name</th>
                                        <th class="text-secondary">Model</th>
                                        <th class="text-secondary">Material</th>
                                        <th class="text-secondary">Animation</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (data.details?.Any() == true)
                                    {
                                        var orderedDetails = GetOrderedDetails(data.details);
                                        foreach (var detail in orderedDetails
                                        .Where(detail => string.IsNullOrEmpty(searchKey) ||
                                        (detail.ingamename?.Contains(searchKey, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                        (detail.model?.Contains(searchKey, StringComparison.OrdinalIgnoreCase) ?? false)))
                                        {
                                            <tr class="@(detail.ingamename == "n/a" ? "table-secondary" : string.Empty)">
                                                <td class="text-muted">@detail.ingamename</td>
                                                <td class="text-muted">
                                                    <a target="_blank"
                                                        href="https://lite.biast12.site/Legends/Models/@data.legend/@detail.model">@detail.model</a>
                                                </td>
                                                <td class="text-muted">
                                                    <a target="_blank"
                                                        href="https://lite.biast12.site/Legends/Textures/@data.legend">@detail.texture</a>
                                                </td>
                                                <td class="text-muted">
                                                    <a target="_blank"
                                                        href="https://lite.biast12.site/Legends/Animations/@data.legend/@detail.animation">@detail.animation</a>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            @for (int i = 0; i < 4; i++)
                                            {
                                                <td class="border">No data</td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<SkinData>? Data { get; set; }
    private string? searchKey { get; set; } = string.Empty;
    private string sortField { get; set; } = "ingamename";
    private string sortOrder { get; set; } = "asc";

    private IEnumerable<SkinData> FilteredAndSortedData =>
    Data?.Where(item =>
    {
        if (!string.IsNullOrEmpty(searchKey))
        {
            return item.legend.Contains(searchKey, StringComparison.OrdinalIgnoreCase) ||
    item.details.Any(detail =>
    (detail.ingamename?.Contains(searchKey, StringComparison.OrdinalIgnoreCase) ?? false) ||
    (detail.model?.Contains(searchKey, StringComparison.OrdinalIgnoreCase) ?? false));
        }
        return true;
    })
    .OrderBy(item => item.legend)
    .ToList() ?? new List<SkinData>();

    private IEnumerable<SkinDetail> GetOrderedDetails(IEnumerable<SkinDetail> details)
    {
        return sortOrder == "asc"
        ? details.OrderBy(detail => detail.ingamename == "Base Skin" ? "" :
        detail.GetType().GetProperty(sortField)?.GetValue(detail)?.ToString())
        : details.OrderByDescending(detail => detail.ingamename == "Base Skin" ? "" :
        detail.GetType().GetProperty(sortField)?.GetValue(detail)?.ToString());
    }

    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient("ApexSkinsTranslatorClient");

        try
        {
            var response = await client.GetAsync("apex_skin_translator");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                Data = JsonSerializer.Deserialize<List<SkinData>>(json);
            }
            else
            {
                Console.WriteLine($"Error: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }

        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("search", out var _initialSearch))
        {
            searchKey = _initialSearch.ToString();
        }
    }
}
